/*
 * SPDX-FileCopyrightText: 2023 The LineageOS Project
 * SPDX-License-Identifier: Apache-2.0
 */

package org.lineageos.generatebp

import org.gradle.api.Project
import org.gradle.kotlin.dsl.get
import org.lineageos.generatebp.ext.*
import org.lineageos.generatebp.models.Artifact
import org.lineageos.generatebp.models.Module
import java.io.File

internal class GenerateBp(
    private val project: Project,
    private val targetSdk: Int,
    private val isAvailableInAOSP: (module: Module) -> Boolean,
) {
    private val configuration = project.configurations["releaseRuntimeClasspath"]

    private val projectDependencies = configuration.allDependencies.filter {
        // kotlin-bom does not need to be added to dependencies
        it.group != "org.jetbrains.kotlin" && it.name != "kotlin-bom"
    }.map {
        Module.fromDependency(it)
    }

    private val artifacts = configuration.resolvedConfiguration.resolvedArtifacts.map {
        Artifact.fromResolvedArtifact(it, targetSdk)
    }.toSortedSet()

    private val libsBase = File("${project.projectDir.absolutePath}/libs")

    operator fun invoke() {
        // Delete old libs artifacts
        libsBase.deleteRecursively()

        // Update app/Android.bp
        File("${project.projectDir.absolutePath}/Android.bp").let { file ->
            val dependenciesString = buildString {
                append("\n")
                append(SHARED_LIBS_HEADER.indentWithSpaces(8))
                append("\n")
                append(
                    projectDependencies.map {
                        "\"${it.aospModuleName}\","
                    }.indentWithSpaces(8).joinToString("\n")
                )
                append("\n${spaces(4)}")
            }

            // Replace existing dependencies with newly generated ones
            file.writeText(
                file.readText().replace(
                    "static_libs: \\[.*?]".toRegex(RegexOption.DOT_MATCHES_ALL),
                    "static_libs: [%s]".format(dependenciesString)
                )
            )
        }

        // Update app/libs
        artifacts.forEach {
            // Skip modules that are available in AOSP
            if (isAvailableInAOSP(it.module)) {
                return@forEach
            }

            // Get file path
            val dirPath = "${libsBase}/${it.module.aospModulePath}"
            val filePath = "${dirPath}/${it.file.name}"

            // Copy artifact to app/libs
            it.file.copyTo(File(filePath))

            // Extract AndroidManifest.xml for AARs
            if (it.file.extension == "aar") {
                project.copy {
                    from(project.zipTree(filePath).matching {
                        include("/AndroidManifest.xml")
                    }.singleFile)
                    into(dirPath)
                }
            }

            // Write Android.bp
            File("$libsBase/Android.bp").let { file ->
                // Add autogenerated header if file is empty
                if (file.length() == 0L) {
                    file.writeText(LIBS_ANDROID_BP_HEADER)
                }

                when (it.fileType) {
                    Artifact.FileType.AAR -> {
                        file.appendText(
                            """

                            android_library_import {
                                name: "${it.module.aospModuleName}-nodeps",
                                aars: ["${it.module.aospModulePath}/${it.file.name}"],
                                sdk_version: "${it.targetSdkVersion}",
                                min_sdk_version: "${it.minSdkVersion}",
                                apex_available: [
                                    "//apex_available:platform",
                                    "//apex_available:anyapex",
                                ],
                                static_libs: [%s],
                            }

                            android_library {
                                name: "${it.module.aospModuleName}",
                                sdk_version: "${it.targetSdkVersion}",
                                min_sdk_version: "${it.minSdkVersion}",
                                apex_available: [
                                    "//apex_available:platform",
                                    "//apex_available:anyapex",
                                ],
                                manifest: "${it.module.aospModulePath}/AndroidManifest.xml",
                                static_libs: [%s],
                                java_version: "1.7",
                            }

                        """.trimIndent().format(
                                it.formatDependencies(false),
                                it.formatDependencies(true)
                            )
                        )
                    }

                    Artifact.FileType.JAR -> {
                        file.appendText(
                            """

                            java_import {
                                name: "${it.module.aospModuleName}-nodeps",
                                jars: ["${it.module.aospModulePath}/${it.file.name}"],
                                sdk_version: "${it.targetSdkVersion}",
                                min_sdk_version: "${it.minSdkVersion}",
                                apex_available: [
                                    "//apex_available:platform",
                                    "//apex_available:anyapex",
                                ],
                            }

                            java_library_static {
                                name: "${it.module.aospModuleName}",
                                sdk_version: "${it.targetSdkVersion}",
                                min_sdk_version: "${it.minSdkVersion}",
                                apex_available: [
                                    "//apex_available:platform",
                                    "//apex_available:anyapex",
                                ],
                                static_libs: [%s],
                                java_version: "1.7",
                            }

                        """.trimIndent().format(
                                it.formatDependencies(true)
                            )
                        )
                    }
                }
            }
        }
    }

    private val Module.aospModuleName
        get() = if (isAvailableInAOSP(this)) {
            moduleNameAOSP("${group}:${name}")
        } else {
            "${project.rootProject.name}_${group}_${name}"
        }

    private fun Artifact.formatDependencies(addNoDependencies: Boolean): String {
        val aospDependencies = dependencies.filter { dep ->
            when {
                artifacts.firstOrNull { artifact ->
                    dep == artifact.module
                } == null -> {
                    val moduleName = if (addNoDependencies) {
                        dep.aospModuleName
                    } else {
                        "${dep.aospModuleName}-nodeps"
                    }
                    log("$moduleName: Skipping ${dep.gradleName} because it's not in resolvedArtifacts")
                    false
                }

                dep.group == "org.jetbrains.kotlin" && dep.name == "kotlin-stdlib-common" -> false
                else -> true
            }
        }.distinct().map {
            it.aospModuleName
        }.toMutableList()

        if (addNoDependencies) {
            // Add -nodeps dependency for android_library/java_library_static
            aospDependencies.add(0, "${module.aospModuleName}-nodeps")
        }

        return aospDependencies.map {
            "\"${it}\","
        }.indentWithSpaces(8).joinToString("") {
            "\n$it"
        } + "\n${spaces(4)}"
    }

    companion object {
        private const val DEBUG = false

        private const val SHARED_LIBS_HEADER = "// DO NOT EDIT THIS SECTION MANUALLY"
        private const val LIBS_ANDROID_BP_HEADER = "// DO NOT EDIT THIS FILE MANUALLY"

        private fun log(message: String) {
            if (DEBUG) {
                println(message)
            }
        }

        private fun moduleNameAOSP(moduleName: String) = when (moduleName) {
            "androidx.constraintlayout:constraintlayout" -> "androidx-constraintlayout_constraintlayout"
            "com.google.auto.value:auto-value-annotations" -> "auto_value_annotations"
            "com.google.guava:guava" -> "guava"
            "com.google.guava:listenablefuture" -> "guava"
            "org.jetbrains.kotlin:kotlin-stdlib" -> "kotlin-stdlib"
            "org.jetbrains.kotlin:kotlin-stdlib-jdk8" -> "kotlin-stdlib-jdk8"
            "org.jetbrains.kotlinx:kotlinx-coroutines-android" -> "kotlinx-coroutines-android"
            "org.jetbrains.kotlinx:kotlinx-coroutines-core" -> "kotlinx-coroutines-core"
            else -> moduleName.replace(":", "_")
        }
    }
}
